// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	metrics "github.com/c-garcia/halleffect/internal/pkg/metrics"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockJobLastSuccessfulDuration is a mock of JobLastSuccessfulDuration interface
type MockJobLastSuccessfulDuration struct {
	ctrl     *gomock.Controller
	recorder *MockJobLastSuccessfulDurationMockRecorder
}

// MockJobLastSuccessfulDurationMockRecorder is the mock recorder for MockJobLastSuccessfulDuration
type MockJobLastSuccessfulDurationMockRecorder struct {
	mock *MockJobLastSuccessfulDuration
}

// NewMockJobLastSuccessfulDuration creates a new mock instance
func NewMockJobLastSuccessfulDuration(ctrl *gomock.Controller) *MockJobLastSuccessfulDuration {
	mock := &MockJobLastSuccessfulDuration{ctrl: ctrl}
	mock.recorder = &MockJobLastSuccessfulDurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobLastSuccessfulDuration) EXPECT() *MockJobLastSuccessfulDurationMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m_2 *MockJobLastSuccessfulDuration) Store(m metrics.JobLastSuccessfulDuration) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Store", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockJobLastSuccessfulDurationMockRecorder) Store(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockJobLastSuccessfulDuration)(nil).Store), m)
}
